//git commands list//

git init
git status

git add /имя файла/ //добавить изменения в INDEX git, подготовка к коммиту

git commit //откроеться редактор по умолчанию для написания текста коммита
git commit -m "текст коммита" //если одним словом то без ""

git rm // уадляет из рабочей директории + удаляет из индекса
git rm -r --cached //удалит из индекса но оставит в рабочем каталоге
--cached //операция проводиться только с INDEX  не затрагивает рабочую директорию.
git rm -f //флаг -f игнорирует предупреждения при выполнении операций

//Ветки//

git branch //список веток
git branch -v //список ветов к указанием коммита с которого она начата
git branch feature //создать нову ветку  feature - название ветки.
git checkout feature //переключиться на другую ветку feature - название ветки
git checkout -b feature //создать ветку и сразу переключиться на нее
git checkout -f master //перейти к другой ветке, стерев все не закомиченные изменения в текущей -f сокращенный вариант --forse
git checkout -f HEAD //стереть не закомиченные изменения в текущей ветке. Так как HEAD ссылка на текущую ветку
git checkout 9e28  //9e28  идентификатор коммита, можно перейти не только на ветку но и на коммит, нужно написать номер коммита
при таком использовании возникает ситуация оделенной HEAD.
git cherry-pick 9e28 // 9e28  идентификатор коммита, перенести в ветку
git chekout 54a4 index.html //востановить отдельный файл из конретного коммита, 54a4 -идентификатор коммита index.html файл
git chekout HEAD index.html //востановить отдельный файл из последнего коммита
git log //просмотр истории изменений
git log --oneline //просмотр истории изменений кратко
git log master //можно посмотреть историю для отдельной ветки или с коммита
git show //посмотреть информацию по коммиту из HEAD
git show 2702 //посмотреть информацию по конкретному коммиту 2702, идентификатор коммита
git show HEAD~ //посмотреть предыдущий коммит от коммита в HEAD
git show HEAD~~ //посмотреть еще на один от коммит ниже HEAD, ~~~ еще ниже, на 3 коммита и так далее
git show HEAD~3 //3 - количество коммитов назад
git show HEAD~~ --quiet //краткая информация
git show HEAD~:index.html //посмотреть содержание конкретного файла из конркетного коммита
git show :index.html //посмотреть версию файла из индекса
git show :/sayBye //поиск по описанию коммита, будет найден самый свежий коммит со словом в описании

//Слияние веток перемоткой//

Слияние ветки fix и ветки master

git checkout master //Переключаемся на ветку master
git merge fix //сливаем ветк fix с текущей веткой
git branch -f master 54a4 //передвинуть ветку мастер на коомит до слияния
git branch -f master ORIG_HEAD //откатить ветку master на коммит из ORIG_HEAD 

git checkout -B master fix //аналогично git merge fix на master 

git branch -d fix //удалить ветку fix, удаление сработает только если удаляемая
ветка объединена с текущей
git branch -D feature //удалить ветку feature  без учета того, что ее коммиты не 
перенесены в другие ветки. Удаляеться ссылка, но недостижимые коммиты какое-то 
время храняться в базе


git reset //откатиться на предыдущие коммиты, можно передать идентификатор коммита или @~ на один комминт
назад в HEAD
git checkout -f //удалить файлы из директории проекта, сбросить индекс, загрузить файлы из коммиты а HEAD
git checkout -f index.html //аналогично, но для конкретного файла
git reset --hard //удалить файлы из директории проекта, сбросить индекс, загрузить файлы из коммиты а HEAD
git clean -dxf //удалить с неисользуемыми файлами -d удалить включая директории -x включая то что 
есть в гит игноре -f forсe иначе не выполнит 
git reset --hard @~ //жесткий резет, передвигает ветку на нужный коммит, обновляет рабочую директорию 
и индекс чтобы они соответствовали целевому коммиту
git reset --hard ORIG_HEAD //При выполнении команды reset гит записывает отмененный коммит в ORIG_HEAD

git reset --soft //будет отменен текущий коммит HEAD, файлы и индекс не изменяться, git status
покажет не закомиченные изменения.
reset --soft -с ORIG_HEAD //возьмет описание коммита из отмененного -с отроеться в редакторе 
-С без редактирования, в том числе сохраняеться автор.
reset --soft -с ORIG_HEAD --reset-author //поставить текущего автора
git reset HEAD \ git reset \\ откатиться на последний коммит
git reset index.html \\ откатить на последний коммит только для файла index.html
git reset 54a4  index.html  \\ откатить на последний коммит только для файла index.html, загрузить в индекс   index.html  из коммита 54a4

//git diff//

git diff //сравнить коммиты или ветки, git diff - сравнивает рабочую директорию с индексом
git diff --index.html //аналогично git diff  но только по конкретному файлу, файл можно добавлять к любой из комманд,
--index.html  -- обозначает что длаьше пойдет путь к файлу, не обязательно но лучше использовать
git diff --cached//сравнить индекс с HEAD, или можно передать конкретный идентификатор коммита
git diff master feature// сравнить ветки 
git diff master..feature// сравнить ветки 
git diff master...feature// три точки, что изменилось в feature с момента отхождения ветки от master
git diff 2fad// сравнить содержание рабочей директории с коммитом 2fad
git diff HEAD// изменения в рабочей директории с момента последнего коммита
git diff --no-index path1 path2 //сравнить два любых файла на диске,даже если они не отслеживаються git

git commit -v //добавить в текст коммита изменения которые он несет, тест изменений не попадет в текст коммита, 
отделен ножницами #-----5>------
git config --global commit.verbose true //включить вывод изменений в текст коммита по умолчанию

//git log//

git log //вывести коммиты для текущей ветки в хронологическом порядке, от новых к старым
git log --pretty=medium //форматирование коммитов по умолчанию, варианты:
oneline - в одну строку
git log --oneline //в одну строку с сокращенными идентификаторами коммитов
git log --prette=format:'%h %cd | %s%d [%an]' // %h - сокращенный идентификатор, %cd - дата коммитера | - разделитель для красоты,
%s%d - указатель ветки [%an] - автор
%cd - относительная дата 
%C(yellow) - применить цвет можно использовать несколько раз, красит текст который идет после него
%C(reset) - сброс цвета
%C(#667788) - можно передать цвет в формате RGB
git help log //посмотреть в справке расшифровку сокращений
git config --global pretty.my format%'формат' //создать формат вывода
git log --pretty=my //гит лог в созданном формате
git config --global format.pretty my //сделать форматом по умолчанию
git config --global log.date short //задать формат даты для команды лог по умолчанию 
git log -p //добавляет к каждому коммиту, что в нем было сделанно
git log // по умолчанию выводит коммиты достижимые из HEAD можно передать ветку или идентификатор коммита
git log master
git log master feature --graph //коммиты из двух веток --graph разделить коммиты по веткам
git log --all --graph //коммиты доступные из всех ссылок в git
git log feature ^master //посмотреть коммиты доступные из ветки feature, но без коммитов из master
git log master..feature //аналог предыдущей команды
git log ..feature //аналог но первая ссылка на HEAD
git log feature.. // в обратную сторону
git log feature.. --boundary //вывести с коммитом на котором ветки разделились
git log master...feature --graph //коммиты доступные из мастер или фичер, но не одновременно, то есть есть только там или там 
git log index.html //коммиты в которых менялся файл путь к файлу моно добавлять к любой команде git log
git log --grep Run //поиск коммитов в которы в описании есть Run
git log --grep Run --grep ... //или первое слово или второе --all-match оба одновременно
используються регулярные вырожения
--grep 'say(Hi|Bye)' - p // -p включить перлсовместимые регулярные выражения
git config --global grep.patternType perl //включить по умолчанию
git log --grep Run -F //отключить регулярные выражения поиск по тексту
git log --grep Run -i //без учета регистра
git log -GsayHi -p //вывести все коммиты в изменениях которых есть sayHi, -p вывести изменения
git log -L 3,6:index.html //вывести все коммиты в которых были изменения в index.html с 3 по 6 строку
git log --author= //искать по автору
git log --commiter=
git log --before '2017-09-17' //до определенного числа
git log --after '2017-09-17' //после

//git blame//

git blame INSTALL //вывести список изменнений файла с указателем автора
git blame INSTALL --date=short -L 5,8 //сократить дату, вывести только нужные строки из диапазона

